#! /bin/sh

# paperconfig: configuration of system paper name
#
# Copyright (C) 1996, Yves Arrouye <arrouye@debian.org>
#               2001, Adrian Bunk  <bunk@fs.tum.de>
#               2013, Reuben Thomas <rrt@sc3d.org>

@relocatable_sh@
if test "@RELOCATABLE@" = yes; then
    exec_prefix="@exec_prefix@"
    bindir="@bindir@"
    orig_installdir="$bindir" # see Makefile.am's *_SCRIPTS variables
    func_find_curr_installdir # determine curr_installdir
    func_find_prefixes
    # Relocate the directory variables that we use.
    PAPERCONF=`
        echo "@PAPERCONF@/" \
        | sed -e "s%^${orig_installprefix}/%${curr_installprefix}/%" \
        | sed -e 's,/$,,'`
    PAPERDIR=`
        echo "@PAPERDIR@/" \
        | sed -e "s%^${orig_installprefix}/%${curr_installprefix}/%" \
        | sed -e 's,/$,,'`
fi

usage() {
    echo "Usage: `basename $0` [--version|--help|--paper NAME|--choose]"

    if [ "$1" = -h ]
    then
	cat <<EOF

Options: -v, --verbose          print version information and exit
         -h, --help             print this help and exit
         -p, --paper NAME       specify the paper to use
         -c, --choose           choose paper interactively
EOF
	exit 0
    else
	exit 1
    fi
}

choose=0

if [ "$#" -eq 0 ]
  then
    paperconf `cat $PAPERCONF`
    exit 0
fi

while [ $# -ne 0 ]
do
    case "$1" in
	-v|--version)
	    echo "`basename $0` version 1.1" \
		"by Yves Arrouye <arrouye@debian.org>"
	    exit 0
	    ;;
	-h|--help)
	    usage -h
	    ;;
	-p|--paper)
	    test $# -gt 1 || usage
	    paper="$2"
	    shift
	    ;;
	-c|--choose)
	    choose=1
	    ;;
	*)
	    usage
	    ;;
    esac
    shift
done

invalidpaper() {
    ! paperconf "$1" 2>/dev/null 1>&2
}

format() {
    _maxwidth=$1; shift
    _start="$1"; shift

    _cline=

    for w
    do
	if [ `echo "$_start$_cline$w " | wc -c` -ge 0$_maxwidth ]
	then
	    echo "$_cline"
	    _cline=
	    _start=
	fi
	_cline="$_cline$w "
    done

    if [ -n "$_cline" ]
    then
	echo "$_cline"
    fi

    unset _maxwidth _cline _start
}

setpaper() {
    paperright=`paperconf "$1" 2>/dev/null`

    ok=0

    if 2>/dev/null echo "$paperright" >${PAPERCONF}.new
    then
	if 2>/dev/null mv -f ${PAPERCONF}.new $PAPERCONF
	then
	    if 2>/dev/null chmod 644 $PAPERCONF
	    then
		ok=1
	    fi
	fi
    fi

    if [ $ok -eq 0 ]
    then
	echo `basename $0`: cannot create $PAPERCONF
	exit 2
    else
	if [ -d $PAPERDIR ]
	then
	    run-parts $PAPERDIR
	fi
    fi
}

if [ ! -z "$paper" ]
then
    if invalidpaper $paper
    then
	>&2 echo `basename $0`: \"$paper\" is not a known paper name
	exit 3
    fi
    setpaper "$paper"
    exit 0
fi

knownpapers="`paperconf -a`"

prompt=
width=72

paper=`paperconf 2>/dev/null || true`
dftpaper=`paperconf`

if [ $choose -eq 1 ]
then
    papers="`format $width \"\" $knownpapers`"
    echo

    if [ -x /usr/bin/sensible-pager ]
    then
      : ${pager:=/usr/bin/sensible-pager}
    else
      : ${pager:=more}
    fi

    LESS="-X -E $LESS"
    export LESS

    (
	cat <<EOF
The system paper can be chosen from many known papers that are
currently recognized:

EOF
	echo "$papers" | sed 's/^/    /'
	echo
    ) | ${pager}

    : ${paper:=$dftpaper}

    echo -n "Default paper name? [$paper] "
    read ans
    : ${ans:=$paper}
    paper=$ans

    while invalidpaper "$paper"
    do
        if [ -z "$paper" ]
        then
	    echo "Please choose a paper from the available papers list."
        else
	    echo "Unknown paper \"$paper\"," \
	        "please choose one from the available papers list."
        fi

        paper=$dftpaper

        echo -n "Default paper name? [$paper] "
        read ans
        paper=$ans
    done
fi

if invalidpaper "$paper"
then
    echo "Invalid paper \"$paper\": not setting the system default."
    exit 4
elif [ "`paperconf 2>/dev/null`" != "$paper" ] || grep -q "[#	]" $PAPERCONF
then
    setpaper "$paper"
fi

exit 0
