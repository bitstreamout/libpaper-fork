#!@PERL@
# -*- perl -*-

use 5.10.1;
use strict;
use warnings;
use locale;

# Relocatable header (see after for copyright)

@relocatable_pl@
if ("@RELOCATABLE@" eq "yes") {
  my $exec_prefix = "@exec_prefix@";
  my $orig_installdir = "@bindir@"; # see Makefile.am's *_SCRIPTS variables
  my ($orig_installprefix, $curr_installprefix) = find_prefixes($orig_installdir, find_curr_installdir());
  sub relocate { # the subroutine is defined whether or not the enclosing block is executed
    my ($dir) = @_;
    if ("@RELOCATABLE@" eq "yes") {
      $dir =~ s%^$orig_installprefix/%$curr_installprefix/%;
      $dir =~ s,/$,,;
    }
    return $dir;
  }
}

# Relocate the directory variables that we use.
my $libexecdir = &relocate("@libexecdir@");
my $sysconfdir = &relocate("@sysconfdir@");

# End of relocatable header; "real" Perl starts here.


use Scalar::Util qw(looks_like_number);
use File::Basename;
use File::Spec::Functions;
use Getopt::Long;


my $program_name = basename($0);
$program_name =~ s/\Q@PERL_EXEEXT@\E$//;
my $version_banner = <<END;
$program_name @VERSION@

Copyright (c) 2013-2020 Reuben Thomas <rrt\@sc3d.org>.
Released under the GPL version 3, or (at your option) any later version.
END

sub Die {
  say STDERR "$program_name: $_[0]";
  exit(1);
}

my %units = (
  "pt" => 1,
  "mm" => 72 * .1 / 2.54,
  "in" => 72,
 );
my $unit_err = "bad unit (valid units: " . join(", ", keys %units) . ")";

sub usage {
  my ($exit_code) = @_;
  print STDERR <<END;
Usage: $program_name [OPTION...] [PAPER...|--all]
Print paper size information.

  --all                print information about all known paper sizes
  --name               print paper names (by default, the name is not
                       printed when only one paper argument is given)
  --size               print paper sizes (width followed by height)
  --unit=UNIT          print dimensions in the given unit
                       [default: PostScript points]
  --help               display this help and exit
  --version            display version information and exit
END
  exit $exit_code;
}

# Initialise papers list
sub readspecs {
  my ($file) = @_;
  my @papers;
  open(PAPERSPECS, $file) or Die("could not read `$file'");
  while (<PAPERSPECS>) {
    chomp $_;
    my ($name, $w, $h, $unit) = split /,/;
    $name =~ s/ //;
    local *local_die = sub { Die("$_[0] in line $. of $file"); };
    local_die("missing field") if !defined($name) || !defined($w) || !defined($h) || !defined($unit);
    local_die("bad width") unless looks_like_number($w);
    local_die("bad height") unless looks_like_number($h);
    my $dim = $units{$unit};
    local_die($unit_err) unless $dim;
    push @papers, {name => $name, width => $w * $dim, height => $h * $dim};
  }
  close(PAPERSPECS);
  return @papers;
}

my (@papers, @user_papers, @system_papers, $default_paper);
my $xdg_config_home = $ENV{XDG_CONFIG_HOME};
unless ($xdg_config_home) {
  my $home = $ENV{HOME};
  $xdg_config_home = catfile($home, ".config") if $home;
}
my $userspecs = catfile($xdg_config_home, "@PAPERSPECS@");
@user_papers = readspecs($userspecs) if -e $userspecs;
@system_papers = readspecs(catfile($sysconfdir, "@PAPERSPECS@"));
$default_paper = $system_papers[0] || $user_papers[0] || Die("no paper sizes configured");
push @papers, @user_papers, @system_papers;

# Parse command-line options
my ($opt_all, $opt_name, $opt_size, $opt_help, $opt_version);
my $unit = "pt";
my $opts = GetOptions(
  "all" => \$opt_all,
  "name" => \$opt_name,
  "size" => \$opt_size,
  "unit=s" => \$unit,
  "help" => \$opt_help,
  "version" => \$opt_version,
 ) or usage(1);
if ($opt_version) {
  print STDERR $version_banner;
  exit 0;
}
usage(0) if $opt_help;
my $dim = $units{$unit} or Die($unit_err);
usage(1) if $opt_all && $#ARGV >= 0;

# Get paper type from the locale
sub mm_to_pt { int(($_[0] * 72 / 2.54 / 10) + 0.5); }

sub trim {
  my ($s) = @_;
  $s =~ s/^\s+|\s+$//g;
  return $s;
}

sub papernamefile {
  my ($file) = @_;
  open(PAPERSIZE, $file) or return;
  my $output = do {local $/, <PAPERSIZE>} or return;
  return trim($output);
}

sub localepapername {
  my $localepaper = catfile($libexecdir, "localepaper");
  my $dims = `$localepaper@EXEEXT@` or return;
  chomp $dims;
  return if !defined($dims);
  my ($w, $h) = split /\s/, $dims;
  return if !looks_like_number($w) || !looks_like_number($h);
  ($w, $h) = map { mm_to_pt($_) } $w, $h;
  foreach my $p (@papers) {
    return $p->{name} if int($p->{width} + 0.5) == $w && int($p->{height} + 0.5) == $h;
  }
}

# Work out user's current paper size
sub currentpaper {
  return $ENV{PAPERSIZE} ||
    papernamefile(catfile($xdg_config_home, "@PAPERCONF@")) ||
    localepapername() ||
    papernamefile(catfile($sysconfdir, "@PAPERCONF@")) ||
    $default_paper->{name};
}

sub paperinfo {
  my ($paper) = @_;
  foreach my $p (@papers) {
    return $p if $p->{name} =~ /^$paper$/i;
  }
}

# Output requested information
map { push @ARGV, $_->{name} } @papers if $opt_all;
$opt_name = 1 if $#ARGV > 0;
if ($#ARGV == -1) {
  my $paper = currentpaper() or Die("no default paper size is set");
  push @ARGV, $paper;
}
foreach my $name (@ARGV) {
  my $p = paperinfo($name) or Die("unknown paper `$name'");
  my @out;
  push @out, $p->{name} if $opt_name || $opt_all || !$opt_size;
  push @out, $p->{width} / $dim, $p->{height} / $dim if $opt_size;
  say join(' ', @out);
}
