#!/bin/sh
# -*- perl -*-

# Relocatable header (see after for copyright)

@relocatable_sh@
if test "@RELOCATABLE@" = yes; then
  exec_prefix="@exec_prefix@"
  bindir="@bindir@"
  orig_installdir="$bindir" # see Makefile.am's *_SCRIPTS variables
  func_find_curr_installdir # determine curr_installdir
  func_find_prefixes
  # Relocate the directory variables that we use.
  libexecdir=`
    echo "@libexecdir@/" \
    | sed -e "s%^${orig_installprefix}/%${curr_installprefix}/%" \
    | sed -e 's,/$,,'`
  PAPERSPECS=`
    echo "@PAPERSPECS@/" \
    | sed -e "s%^${orig_installprefix}/%${curr_installprefix}/%" \
    | sed -e 's,/$,,'`
fi

#!perl
eval 'exec perl -x -wS $0 "$libexecdir" "$PAPERSPECS" ${1+"$@"}'
    if 0;

my $libexecdir = shift;
my $paperspecs = shift;

# End of relocatable header; "real" Perl starts here.


use 5.10.1;
use strict;
use warnings;

use Scalar::Util qw(looks_like_number);
use File::Basename;
use POSIX qw(locale_h);
use Getopt::Long;


my $program_name = basename($0);
my $version_banner = <<END;
$program_name

Copyright (c) 2013 Reuben Thomas <rrt\@sc3d.org>
Released under the GPL version 3, or (at your option) any later version.
END

setlocale(LC_ALL, "");

sub Die { die "$program_name: $_[0]\n"; }

my %units = (
  "pt" => 1,
  "mm" => 72 * .1 / 2.54,
  "in" => 72,
 );
my $unit_err = "bad unit (valid units: " . join(", ", keys %units) . ")";

sub usage {
  my ($exit_code) = @_;
  print STDERR <<END;
Usage: $program_name [OPTION...] [-a|PAPER...]
Query paper information.

  --all                print information about all known paper sizes
  --name               print paper names
  --size               print paper sizes
  --unit=UNIT          print dimensions in the given unit
  --help               display this help and exit
  --version            display version information and exit
END
  exit $exit_code;
}

# Initialise papers list
my @papers;
open(PAPERSPECS, $paperspecs) or Die("could not read `$paperspecs'");
while (<PAPERSPECS>) {
  chomp $_;
  my ($name, $w, $h, $unit) = split;
  local *local_die = sub { Die("$_[0] in line $. of $paperspecs"); };
  local_die("missing field") if !defined($name) || !defined($w) || !defined($h) || !defined($unit);
  local_die("bad width") unless looks_like_number($w);
  local_die("bad height") unless looks_like_number($h);
  my $dim = $units{$unit};
  local_die($unit_err) unless $dim;
  push @papers, {name => $name, width => $w * $dim, height => $h * $dim};
}
close(PAPERSPECS);

# Parse command-line options
my ($opt_all, $opt_name, $opt_size, $opt_help, $opt_version);
my $unit = "pt";
my $opts = GetOptions(
  "all" => \$opt_all,
  "name" => \$opt_name,
  "size" => \$opt_size,
  "unit=s" => \$unit,
  "help" => \$opt_help,
  "version" => \$opt_version,
 ) or usage(1);
if ($opt_version) {
  print STDERR $version_banner;
  exit 0;
}
usage(0) if $opt_help;
my $dim = $units{$unit} or Die($unit_err);
usage(1) if $opt_all && $#ARGV >= 0;

# Get paper type from the locale
sub mm_to_pt { int(($_[0] * 72 / 2.54 / 10) + 0.5); }

sub localepapername {
  my $dims = `$libexecdir/localepaper` or return;
  chomp $dims;
  return if !defined($dims);
  my ($w, $h) = split /\s/, $dims;
  return if !looks_like_number($w) || !looks_like_number($h);
  ($w, $h) = map { mm_to_pt($_) } $w, $h;
  foreach my $p (@papers) {
    return $p->{name} if int($p->{width} + 0.5) == $w && int($p->{height} + 0.5) == $h;
  }
}

# Work out user's current paper size
sub currentpapername {
  $ENV{PAPERSIZE} || localepapername() || $papers[0]->{name};
}

sub paperinfo {
  my ($paper) = @_;
  foreach my $p (@papers) {
    return $p if $p->{name} ~~ /^$paper$/i;
  }
}

# Output requested information
map { push @ARGV, $_->{name} } @papers if $opt_all;
$opt_name = 1 if $#ARGV > 0;
push @ARGV, currentpapername() if $#ARGV == -1;
foreach my $name (@ARGV) {
  my $p = paperinfo($name) or Die("unknown paper `$name'");
  my @out;
  push @out, $p->{name} if $opt_name || $opt_all || !$opt_size;
  push @out, $p->{width} / $dim, $p->{height} / $dim if $opt_size;
  print join(' ', @out) . "\n";
}
